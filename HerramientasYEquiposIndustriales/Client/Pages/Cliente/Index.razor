@page "/Cliente"

@inject IRepository repository
@inject IToastService toastService

<div>
    <div class="row">
        <div class="col-md-11 col-sm-4">
            <MatAccordion>
                <MatExpansionPanel @bind-Expanded="@Expandido">
                    <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader><h3>Clientes</h3></MatExpansionPanelHeader>
                    </MatExpansionPanelSummary>
                    <MatExpansionPanelDetails>
                        <div class="row">
                            <div class="col-md-4">
                                <MatTextField FullWidth="true" @bind-Value="@NombreClienteBusqueda" HelperText="Nombre del cliente" Label="Nombre"></MatTextField>
                            </div>
                            <div class="col-md-4">
                                <MatTextField FullWidth="true" @bind-Value="@ApellidoClienteBusqueda" HelperText="Apellido del cliente" Label="Apellido"></MatTextField>
                            </div>
                            <div class="col-md-4">
                                <MatTextField FullWidth="true" @bind-Value="@DireccionClienteBusqueda" HelperText="Dirección del cliente" Label="Direcíón"></MatTextField>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <MatTextField FullWidth="true" @bind-Value="@RfcClienteBusqueda" HelperText="RFC del cliente" Label="RFC"></MatTextField>
                            </div>
                            <div class="col-md-2">
                                @*<MatCheckbox @bind-Value="@ClienteFecuente">Cliente frecuente</MatCheckbox>*@
                                <MatCheckbox TValue="bool" ValueChanged="@(value=>OnChangeValueClienteFrecuente(value))" Value="@ClienteFecuente">Cliente frecuente</MatCheckbox>
                            </div>
                            <div class="col-md-2">
                                <MatCheckbox TValue="bool" ValueChanged="@(value=>OnChangeValueTodos(value))" Value="@TodosBusqueda">Todos</MatCheckbox>
                                @*<MatCheckbox @bind-Value="@TodosBusqueda">Todos</MatCheckbox>*@
                            </div>
                            <div class="col-md-2">
                            </div>
                            <div class="col-md-2">
                                <MatButton Raised="true" Icon="search" OnClick="@Buscar">Buscar</MatButton>
                            </div>
                        </div>
                    </MatExpansionPanelDetails>
                </MatExpansionPanel>
            </MatAccordion>
        </div>
        <div class="col-md-1 col-sm-4">
            <MatIconButton OnClick="@OpenDialog" Icon="add_box"></MatIconButton>
        </div>
    </div>
</div>



<div>
    <MatTable Items="@Clientes" class="mat-elevation-z5">
        <MatTableHeader>
            <th style="width:4%;">Código</th>
            <th style="width:15%;">Nombre</th>
            <th style="width:15%;">Apellido</th>
            <th style="width:25%;">Direccion</th>
            <th style="width:15%;">Telefono</th>
            <th style="width:14%;">Correo</th>
            <th style="width:5%;">RFC</th>
            <th style="width:4%;">Frecuente</th>
            <th style="width:3%;"></th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.ClienteId.ToString("00000")</td>
            <td>@context.Nombre</td>
            <td>@context.Apellido</td>
            <td>@context.Direccion</td>
            <td>@context.Telefono</td>
            <td>@context.Correo</td>
            <td>@context.RFC</td>
            <td><MatCheckbox @bind-Value="@context.EsFrecuente" Disabled="true"></MatCheckbox></td>
            <td><MatIconButton OnClick="@(_=>OpenDialogEdit(@context))" Icon="edit"></MatIconButton></td>
        </MatTableRow>
    </MatTable>
</div>


<div>
    <EditForm Model="@Cliente">
        <DataAnnotationsValidator />
        <MatDialog @bind-IsOpen="@dialogIsOpen" CanBeClosed="false">
            <MatDialogTitle><h5>Cliente</h5></MatDialogTitle>
            <MatDialogContent>
                <div class="row">
                    &nbsp;
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <MatTextField FullWidth="true" @bind-Value="@Cliente.Nombre" Label="Nombre"></MatTextField>
                    </div>
                    <div class="col-md-6">
                        <MatTextField FullWidth="true" @bind-Value="@Cliente.Apellido" Label="Apellido"></MatTextField>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <MatTextField FullWidth="true" @bind-Value="@Cliente.Direccion" Label="Dirección"></MatTextField>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <MatTextField FullWidth="true" @bind-Value="@Cliente.Telefono" Label="Teléfono"></MatTextField>
                    </div>
                    <div class="col-md-4">
                        <MatTextField FullWidth="true" @bind-Value="@Cliente.Correo" Label="Correo"></MatTextField>
                    </div>
                    <div class="col-md-4">
                        <MatTextField FullWidth="true" @bind-Value="@Cliente.RFC" Label="RFC"></MatTextField>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <MatCheckbox @bind-Value="@Cliente.EsFrecuente">Cliente frecuente</MatCheckbox>
                    </div>
                </div>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="@CancelaDialog" class="mdc-button-modal">Cancel</MatButton>
                <MatButton OnClick="@GuardarCliente" class="mdc-button-modal">Guardar</MatButton>
            </MatDialogActions>
        </MatDialog>
    </EditForm>
</div>



@code{
    //FILTROS BUSQUEDA
    private string NombreClienteBusqueda = string.Empty;
    private string ApellidoClienteBusqueda = string.Empty;
    private string DireccionClienteBusqueda = string.Empty;
    private string RfcClienteBusqueda = string.Empty;
    private bool ClienteFecuente = false;
    private bool TodosBusqueda = false;

    //VARIABLES
    private List<ClienteDTO> Clientes = new List<ClienteDTO>();
    private ClienteDTO Cliente = new ClienteDTO();
    private bool Expandido = true;
    private bool dialogIsOpen = false;
    Dictionary<string, string> queryStringsDict = new Dictionary<string, string>();



    protected async override Task OnInitializedAsync()
    {
        await CargaClientes();
    }

    private void OnChangeValueTodos(bool value)
    {
        if (TodosBusqueda = value)
            ClienteFecuente = false;
    }

    private void OnChangeValueClienteFrecuente(bool value)
    {
        if (ClienteFecuente = value)
            TodosBusqueda = false;
    }

    private void OpenDialog()
    {
        if (!Expandido) { Expandido = false; }
        dialogIsOpen = true;
    }

    private async Task CancelaDialog()
    {
        dialogIsOpen = false;
        await CargaClientes();
        Clear();
    }

    private void OpenDialogEdit(ClienteDTO clienteEdicion)
    {
        if (!Expandido) { Expandido = false; }
        Cliente = new ClienteDTO()
        {
            ClienteId = clienteEdicion.ClienteId,
            Nombre = clienteEdicion.Nombre,
            Apellido = clienteEdicion.Apellido,
            Telefono = clienteEdicion.Telefono,
            Correo = clienteEdicion.Correo,
            Direccion = clienteEdicion.Direccion,
            RFC = clienteEdicion.RFC,
            EsFrecuente = clienteEdicion.EsFrecuente,
            FechaRegistro = clienteEdicion.FechaRegistro,
            FechaUltimaModificacion = clienteEdicion.FechaUltimaModificacion
        };
        dialogIsOpen = true;
    }


    private async Task CargaClientes()
    {
        var responseHttp = await repository.Get<List<ClienteDTO>>("api/Clientes");
        Clientes = responseHttp.Response;
    }

    private async Task GuardarCliente()
    {
        if (Cliente.ClienteId == 0)
            await CrearCliente();
        else
            await ActualizarCliente();
    }

    private async Task CrearCliente()
    {
        if (Cliente.EsFrecuente != true)
            Cliente.EsFrecuente = false;

        var httpResponse = await repository.Post("api/Clientes", Cliente);

        if (httpResponse.Error)
            toastService.ShowError(await httpResponse.HttpResponseMessage.Content.ReadAsStringAsync(), "Error");
        else
        {
            dialogIsOpen = false;
            await CargaClientes();
            Clear();
            toastService.ShowSuccess("Registro completo", "Guardado");
        }
    }

    private async Task ActualizarCliente()
    {
        var httpResponse = await repository.Put("api/Clientes/" + Cliente.ClienteId, Cliente);

        if (httpResponse.Error)
            toastService.ShowError(await httpResponse.HttpResponseMessage.Content.ReadAsStringAsync(), "Error");
        else
        {
            dialogIsOpen = false;
            await CargaClientes();
            Clear();
            toastService.ShowSuccess("Registro completo", "Guardado");
        }
    }

    private async Task Buscar()
    {
        var queryStrings = GenerarQueryStrings();
        var responseHttp = await repository.Get<List<ClienteDTO>>("api/Clientes/ObtenerClientesFilter?" + queryStrings);
        Clientes = responseHttp.Response;
    }

    private void Clear()
    {
        NombreClienteBusqueda = "";
        ApellidoClienteBusqueda = "";
        DireccionClienteBusqueda = "";
        RfcClienteBusqueda = "";
        ClienteFecuente = false;
        TodosBusqueda = false;

        Cliente = new ClienteDTO();
    }


    private string GenerarQueryStrings()
    {
        if (queryStringsDict == null)
            queryStringsDict = new Dictionary<string, string>();

        queryStringsDict["Nombre"] = NombreClienteBusqueda != null ? NombreClienteBusqueda : String.Empty;
        queryStringsDict["Apellido"] = ApellidoClienteBusqueda != null ? ApellidoClienteBusqueda : String.Empty;
        queryStringsDict["Direccion"] = DireccionClienteBusqueda != null ? DireccionClienteBusqueda : String.Empty;
        queryStringsDict["RFC"] = RfcClienteBusqueda != null ? RfcClienteBusqueda : String.Empty;
        queryStringsDict["EsFrecuente"] = ClienteFecuente.ToString();
        queryStringsDict["Todos"] = TodosBusqueda.ToString();

        var valoresPorDefecto = new List<string>() { "false", "", "0" };

        return string.Join("&", queryStringsDict
            .Where(x => !valoresPorDefecto.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());
    }

}