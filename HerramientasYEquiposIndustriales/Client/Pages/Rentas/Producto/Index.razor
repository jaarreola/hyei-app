@page "/Rentas/Producto"

@using System.Globalization
@using System.Text.Json

@inject IRepository repository
@inject IToastService toastService
@inject IMatDialogService MatDialogService

@inject IJSRuntime Js

<div class="row">
	<div class="col-md-11 col-sm-4">
		<MatAccordion>
			<MatExpansionPanel @bind-Expanded="@Expandido">
				<MatExpansionPanelSummary>
					<MatExpansionPanelHeader><h3>Productos</h3></MatExpansionPanelHeader>
				</MatExpansionPanelSummary>
				<MatExpansionPanelDetails>
					<div class="row">
						<div class="col-md-2">
							<MatTextField FullWidth="true" @bind-Value="@SkuBusqueda" HelperText="Código de barras" Label="Código de barras"></MatTextField>
						</div>
						<div class="col-md-3">
							<MatTextField FullWidth="true" @bind-Value="@NombreBusqueda" HelperText="Nombre del producto/refacción" Label="Nombre"></MatTextField>
						</div>
						<div class="col-md-2">
							<MatTextField FullWidth="true" @bind-Value="@ModeloBusqueda" HelperText="Modelo del producto/refacción" Label="Modelo"></MatTextField>
						</div>
						<div class="col-md-2">
							<MatSelectItem @bind-Value="@MarcaBusqueda" Items="@MarcasBusqueda" Label="Marca">
								<ItemTemplate Context="Marca">
									@Marca?.Descripcion
								</ItemTemplate>
							</MatSelectItem>
						</div>
						<div class="col-md-1">
							<MatIconButton OnClick="@OpenDialogMarca" Icon="library_add"></MatIconButton>
						</div>
						<div class="col-md-2">
							<MatButton Raised="true" Icon="search" OnClick="@Buscar">Buscar</MatButton>
						</div>
					</div>
				</MatExpansionPanelDetails>
			</MatExpansionPanel>
		</MatAccordion>
	</div>
	<div class="col-md-1 col-sm-4">
		<MatIconButton OnClick="@OpenDialog" Icon="add_box"></MatIconButton>
	</div>
</div>

@if (Productos == null)
{
	<br />
	<MatProgressBar Indeterminate="true"></MatProgressBar>
	<h5 class="mat-subtitle1">Cargando Productos</h5>
}
else
{
	@if (procesando == true)
	{
		<MatProgressBar Indeterminate="true"></MatProgressBar>
	}

	<div class="row">
	 <div class="col-md-4 col-sm-4">
	  Productos totales: <strong>@totalProductos</strong>
	 </div>
	 <div class="col-md-4 col-sm-4">
	 </div>
	</div>

	<div>
	 <MatTable Items="@Productos" class="mat-elevation-z5" AllowSelection="true">
	  <MatTableHeader>
	   <th style="width:13%;">SKU</th>
	   <th style="width:28%;">Nombre</th>
	   <th style="width:15%;">Marca</th>
	   <th style="width:10%;">Modelo</th>
	   <th style="width:8%;">Costo Venta</th>
	   <th style="width:8%;">Existencias</th>
	   <th style="width:8%;">Disponibles</th>
	   <th style="width:8%;">Rentadas</th>
	   <th style="width:8%;">Registro</th>
	   <th style="width:5%;"></th>
	   <th style="width:5%;"></th>
	  </MatTableHeader>
	  <MatTableRow>
		@if (context.FechaBaja == null)
		{
		<td style="font-weight:bold">@context.Sku</td>
		}
		@if (context.FechaBaja != null)
		{
		<td style="color:Red">@context.Sku</td>
		}
		<td>@context.Nombre</td>
		<td>@context.Marca.Descripcion</td>
		<td>@context.Modelo</td>
		<td>@FormatoMoneda(@context.CostoVenta.ToString())</td>

		<td>@context.Existencias.Count</td>
		<td>@(context.Existencias.Where(x => x.NoDisponibleRenta = false)).Count</td>
		<td>@(context.Existencias.Where(x => x.NoDisponibleRenta = true)).Count</td>

		<td>@context.FechaRegistro?.ToString("dd/MM/yyyy")</td>
		<td><MatIconButton OnClick="@(_=>OpenDialogEdit(@context))" Icon="edit"></MatIconButton></td>

		@if (context.FechaBaja == null)
		{
		<td><MatIconButton OnClick="@(_=>BajaArticulo(@context))" Icon="cancel"></MatIconButton></td>
		}
		@if (context.FechaBaja != null)
		{
		<td><MatIconButton OnClick="@(_=>AltaArticulo(@context))" Icon="add"></MatIconButton></td>
		}
	  </MatTableRow>
	 </MatTable>
	 <div class="col-md-4 col-sm-4">
		<MatButton OnClick="@ImprimirInventario" Icon="receipt">Reporte de Inventario</MatButton>
	 </div>
    </div>
}

<div>
 <EditForm Model="@Producto">
  <DataAnnotationsValidator />
  <MatDialog @bind-IsOpen="@dialogEditIsOpen" CanBeClosed="false" class="mdc-dialog900">
   <MatDialogTitle><h5>Producto</h5></MatDialogTitle>
   <MatDialogContent>
	<div class="row">
	 <div class="col-md-3">
	  <MatTextField FullWidth="true" @bind-Value="@Producto.Sku" Label="Código de barras"></MatTextField>
	 </div>
	 <div class="col-md-6">
	  <MatTextField FullWidth="true" @bind-Value="@Producto.Nombre" Label="Nombre"></MatTextField>
	 </div>
	 <div class="col-md-3">
	  <MatSelectItem @bind-Value="@Marca" Items="@Marcas" Label="Marca">
	   <ItemTemplate Context="Marca">@Marca?.Descripcion</ItemTemplate>
	  </MatSelectItem>
	 </div>
	</div>
	<div class="row">
	 <div class="col-md-3">
	  <MatTextField FullWidth="true" @bind-Value="@Producto.Modelo" Label="Modelo"></MatTextField>
	 </div>
	 <div class="col-md-3">
	  <MatTextField FullWidth="true" @bind-Value="@Producto.CostoCompra" Label="Costo de Compra" OnFocusOut="@ajustaCostoVenta"></MatTextField>
	 </div>
	 <div class="col-md-2">
	  <MatTextField FullWidth="true" @bind-Value="@porcentajeVenta" Label="Porcentaje de venta" OnFocusOut="@ajustaCostoVenta"></MatTextField>
	 </div>
	 <div class="col-md-3">
	  <MatTextField FullWidth="true" @bind-Value="@Producto.CostoVenta" Label="Costo de Venta"></MatTextField>
	 </div>
	 <div class="col-md-1">
	  <MatIconButton OnClick="@MuestraHistorialPrecios" Icon="history"></MatIconButton>
	 </div>
	</div>
	<div class="row">
	 <div class="col-md-12">
      <MatTextField FullWidth="true" @bind-Value="@Producto.Caracteristicas" Label="Detalle" TextArea="true"></MatTextField>
     </div>
    </div>
	<div class="row">
	 <div class="col-md-1">
	  <MatIconButton OnClick="@(_=>EliminarArticulo(@Producto.ProductosTiendaId))" Icon="delete" hidden="true"></MatIconButton>
	 </div>
	</div>
	<div class="row">
	 <div class="col-md-3">
	  <MatDatePicker @bind-Value="@Producto.FechaRegistro" Label="Fecha Creación" ReadOnly="true" DisableCalendar="true"></MatDatePicker>
	 </div>
	 <div class="col-md-3">
	  <MatDatePicker @bind-Value="@Producto.FechaModificacion" Label="Fecha Modificación" ReadOnly="true" DisableCalendar="true"></MatDatePicker>
	 </div>
	 <div class="col-md-3">
	  <MatDatePicker @bind-Value="@Producto.FechaBaja" Label="Fecha Baja" ReadOnly="true" DisableCalendar="true"></MatDatePicker>
	 </div>
	 <div class="col-md-3">
	  <MatDatePicker @bind-Value="@Producto.FechaActivo" Label="Fecha Reactivación" ReadOnly="true" DisableCalendar="true"></MatDatePicker>
	 </div>
	</div>
	<div class="row">
	 <div class="col-md-3">
	  <MatTextField FullWidth="true" @bind-Value="@nombreEmpleadoCreacion" Label="Empleado Creación" ReadOnly="true"></MatTextField>
	 </div>
	 <div class="col-md-3">
	  <MatTextField FullWidth="true" @bind-Value="@nombreEmpleadoModificacion" Label="Empleado Modificación" ReadOnly="true"></MatTextField>
	 </div>
	 <div class="col-md-3">
	  <MatTextField FullWidth="true" @bind-Value="@nombreEmpleadoBaja" Label="Empleado Baja" ReadOnly="true"></MatTextField>
	 </div>
	 <div class="col-md-3">
	  <MatTextField FullWidth="true" @bind-Value="@nombreEmpleadoActivo" Label="Empleado Activación" ReadOnly="true"></MatTextField>
	 </div>
	</div>
   </MatDialogContent>
   <MatDialogActions>
	<MatButton OnClick="@CancelaDialog" class="mdc-button-modal">Cancel</MatButton>
	<MatButton OnClick="@GuardarProducto" class="mdc-button-modal">Guardar</MatButton>
   </MatDialogActions>
  </MatDialog>
 </EditForm>
</div>


<div>
 <EditForm Model="@Producto">
  <DataAnnotationsValidator />
  <MatDialog @bind-IsOpen="@dialogIsOpen" CanBeClosed="false" class="mdc-dialog900">
   <MatDialogTitle><h5>Producto</h5></MatDialogTitle>
   <MatDialogContent>
	<div class="row">
	 <div class="col-md-3">
	  <MatTextField FullWidth="true" @bind-Value="@Producto.Sku" Label="Código de barras"></MatTextField>
	 </div>
	 <div class="col-md-6">
	  <MatTextField FullWidth="true" @bind-Value="@Producto.Nombre" Label="Nombre"></MatTextField>
	 </div>
	 <div class="col-md-3">
	  <MatSelectItem @bind-Value="@Marca" Items="@Marcas" Label="Marca">
	   <ItemTemplate Context="Marca">
		   @Marca?.Descripcion
	   </ItemTemplate>
	  </MatSelectItem>
	 </div>
	</div>
	<div class="row">
	 <div class="col-md-4">
	  <MatTextField FullWidth="true" @bind-Value="@Producto.Modelo" Label="Modelo"></MatTextField>
	 </div>
	 <div class="col-md-3">
	  <MatTextField FullWidth="true" @bind-Value="@Producto.CostoCompra" Label="Costo de Compra" OnFocusOut="@ajustaCostoVenta"></MatTextField>
	 </div>
	 <div class="col-md-2">
	  <MatTextField FullWidth="true" @bind-Value="@porcentajeVenta" Label="Porcentaje de venta" OnFocusOut="@ajustaCostoVenta"></MatTextField>
	 </div>
	 <div class="col-md-3">
	  <MatTextField FullWidth="true" @bind-Value="@Producto.CostoVenta" Label="Costo de Venta"></MatTextField>
	 </div>
	</div>
	<div class="row h-300">
	 <div class="col-md-12">
      <MatTextField FullWidth="true" @bind-Value="@Producto.Caracteristicas" Label="Detalle" TextArea="true"></MatTextField>
     </div>
    </div>
	<div class="row">
	 <div class="col-md-1">
	  <MatIconButton OnClick="@(_=>EliminarArticulo(@Producto.ProductosTiendaId))" Icon="delete" hidden="true"></MatIconButton>
	 </div>
	</div>
   </MatDialogContent>
   <MatDialogActions>
	<MatButton OnClick="@CancelaDialog" class="mdc-button-modal">Cancel</MatButton>
	<MatButton OnClick="@GuardarProducto" class="mdc-button-modal">Guardar</MatButton>
   </MatDialogActions>
  </MatDialog>
 </EditForm>
</div>



<div>
 <EditForm Model="@NuevaMarca">
  <DataAnnotationsValidator />
  <MatDialog @bind-IsOpen="@dialogMarcaIsOpen" CanBeClosed="false">
   <MatDialogTitle><h5>Marca</h5></MatDialogTitle>
   <MatDialogContent>
	<div class="row">
	 &nbsp;
	</div>
	<div class="row">
	 <div class="col-md-12">
	  <MatTextField FullWidth="true" @bind-Value="@NuevaMarca.Descripcion" Label="Nombre" HelperText="Nombre de la marca"></MatTextField>
	 </div>
	</div>
   </MatDialogContent>
   <MatDialogActions>
	<MatButton OnClick="@CancelaDialogMarca" class="mdc-button-modal">Cancel</MatButton>
	<MatButton OnClick="GuardarMarca" class="mdc-button-modal">Guardar</MatButton>
   </MatDialogActions>
  </MatDialog>
 </EditForm>
</div>



<div>
 <MatDialog @bind-IsOpen="@dialogValidaEmpleado" CanBeClosed="false">
  <MatDialogTitle><h5>Valida Empleado</h5></MatDialogTitle>
  <MatDialogContent>
   <div class="row">
	<div class="col-md-12">
	 <MatTextField FullWidth="true" @bind-Value="@numeroEmpleado" Label="Numero Empleado" HelperText="Numero de empleado" Type="password"></MatTextField>
	</div>
   </div>
  </MatDialogContent>
  <MatDialogActions>
			@if (procesando == true)
			{
	   <MatProgressBar Indeterminate="true"></MatProgressBar>

			}
			else
			{
	   <MatButton OnClick="@CancelaDialogValidaEmpleado" class="mdc-button-modal">Cancel</MatButton>
	   <MatButton OnClick="@ValidaEmpleado" class="mdc-button-modal">Aceptar</MatButton>
			}
  </MatDialogActions>
 </MatDialog>
</div>



<div>
 <MatDialog @bind-IsOpen="@dialogValidaEmpleadoSave" CanBeClosed="false">
  <MatDialogTitle><h5>Valida Empleado</h5></MatDialogTitle>
  <MatDialogContent>
   <div class="row">
	<div class="col-md-12">
	 <MatTextField FullWidth="true" @bind-Value="@numeroEmpleado" Label="Numero Empleado" HelperText="Numero de empleado" Type="password"></MatTextField>
	</div>
   </div>
  </MatDialogContent>
  <MatDialogActions>
			@if (procesando == true)
			{
	   <MatProgressBar Indeterminate="true"></MatProgressBar>
			}
			else
			{
	   <MatButton OnClick="@CancelaDialogValidaEmpleado" class="mdc-button-modal">Cancel</MatButton>
	   <MatButton OnClick="@ValidaEmpleadoSave" class="mdc-button-modal">Aceptar</MatButton>
			}
  </MatDialogActions>
 </MatDialog>
</div>


@*Modal Historial de Precios*@
<MatDialog @bind-IsOpen="@dialogHistorialPreciosIsOpen" CanBeClosed="false">
 <MatDialogTitle><h5>Historial de Precios</h5></MatDialogTitle>
 <MatDialogContent>
  <div class="row">
   <div class="col-md-12">
	<MatTable Items="@historialPrecios" AllowSelection="true" class="mat-elevation-z10 mdc-table1" ShowPaging="false" PageSize="@pageSizeHistorial">
	 <MatTableHeader>
	  <th style="width:35%;">Fecha Registro</th>
	  <th style="width:35%">Costo Compra</th>
	  <th style="width:30%">Costo Venta</th>
	 </MatTableHeader>
	 <MatTableRow>
	  <td>@context.FechaRegistro?.ToString("dd/MM/yyyy hh:mm tt")</td>
	  <td>@FormatoMoneda(@context.CostoCompra.ToString())</td>
	  <td>@FormatoMoneda(@context.CostoVenta.ToString())</td>
	 </MatTableRow>
	</MatTable>
   </div>
  </div>
 </MatDialogContent>
 <MatDialogActions>
  <MatButton OnClick="@CierraHistorialPrecios" class="mdc-button-modal">Cerrar</MatButton>
 </MatDialogActions>
</MatDialog>


@code {
	//FILTROS BUSQUEDA
	private string SkuBusqueda = string.Empty;
	private string NombreBusqueda = string.Empty;
	private string ModeloBusqueda = string.Empty;

	//MARCAS PRODUCTOS RENTA
	private MarcasProductosTiendaDTO MarcaBusqueda = new MarcasProductosTiendaDTO();
	private List<MarcasProductosTiendaDTO> Marcas = new List<MarcasProductosTiendaDTO>();
	private List<MarcasProductosTiendaDTO> MarcasBusqueda = new List<MarcasProductosTiendaDTO>();


	//VARIABLES
	private List<ProductosTiendaDTO> Productos; //= new List<ProductosTiendaDTO>();
	private ProductosTiendaDTO Producto = new ProductosTiendaDTO();
	private MarcasProductosTiendaDTO Marca = new MarcasProductosTiendaDTO();
	private MarcasProductosTiendaDTO NuevaMarca = new MarcasProductosTiendaDTO();
	private bool Expandido = true;
	private bool dialogIsOpen = false;
	private bool dialogEditIsOpen = false;
	private bool dialogMarcaIsOpen = false;
	Dictionary<string, string> queryStringsDict = new Dictionary<string, string>();

	private ProductosTiendaDTO productoSeleccionado;
	private bool dialogValidaEmpleado;
	private bool dialogValidaEmpleadoSave;
	private String numeroEmpleado = String.Empty;
	private EmpleadoDTO empleado = new EmpleadoDTO();

	private String nombreEmpleadoCreacion = String.Empty;
	private String nombreEmpleadoModificacion = String.Empty;
	private String nombreEmpleadoBaja = String.Empty;
	private String nombreEmpleadoActivo = String.Empty;

	private String precioMayorPorcentaje = "";

	private int idProductoEliminar = 0;
	private int totalProductos = 0;

	private int porcentajeVenta = 20;

	private string ipRutaReportes = string.Empty;

	private bool procesando = false;


	private bool dialogHistorialPreciosIsOpen = false;
	private int pageSizeHistorial = 0;
	private List<HistorialPreciosProductosDTO> historialPrecios = new List<HistorialPreciosProductosDTO>();

	protected async override Task OnInitializedAsync()
	{
		System.Threading.Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
		CultureInfo.CurrentCulture = new CultureInfo("en-US", false);

		await CargaComboMarcas();
		await CargaProductos();
		await CargaRutaReportes();
		await Task.Delay(50);
	}


	private void OpenDialog()
	{
		if (!Expandido) { Expandido = false; }
		dialogIsOpen = true;
	}


	private void OpenDialogEdit()
	{
		System.Threading.Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
		CultureInfo.CurrentCulture = new CultureInfo("en-US", false);

		if (!Expandido) { Expandido = false; }
		dialogEditIsOpen = true;
	}

	private async Task CancelaDialog()
	{
		dialogIsOpen = false;
		dialogEditIsOpen = false;
		Clear();
		await Task.Delay(50);
	}

	private void OpenDialogMarca()
	{
		if (!Expandido) { Expandido = false; }
		dialogMarcaIsOpen = true;
	}

	private async Task CancelaDialogMarca()
	{
		dialogMarcaIsOpen = false;
		dialogIsOpen = false;
		await CargaProductos();
		Clear();
		await Task.Delay(50);
	}

	private async Task OpenDialogEdit(ProductosTiendaDTO productoEdicion)
	{
		if (!Expandido) { Expandido = false; }
		Producto = new ProductosTiendaDTO()
		{
			ProductosTiendaId = productoEdicion.ProductosTiendaId,
			Sku = productoEdicion.Sku,
			Nombre = productoEdicion.Nombre,
			Modelo = productoEdicion.Modelo,
			MarcasProductosTiendaId = productoEdicion.MarcasProductosTiendaId,
			CostoCompra = productoEdicion.CostoCompra,
			CostoVenta = productoEdicion.CostoVenta,
			Marca = productoEdicion.Marca,
			FechaRegistro = productoEdicion.FechaRegistro,
			FechaModificacion = productoEdicion.FechaModificacion,
			FechaBaja = productoEdicion.FechaBaja,
			FechaActivo = productoEdicion.FechaActivo
		};
		Marca = new MarcasProductosTiendaDTO() { MarcasProductosTiendaId = productoEdicion.Marca.MarcasProductosTiendaId, Descripcion = productoEdicion.Marca.Descripcion };

		if (productoEdicion.EmpleadoCreacion != 0)
			nombreEmpleadoCreacion = (await repository.Get<EmpleadoDTO>("api/Empleados/" + productoEdicion.EmpleadoCreacion)).Response.Nombre;
		else
			nombreEmpleadoCreacion = String.Empty;

		if (productoEdicion.EmpleadoModificacion != null)
			nombreEmpleadoModificacion = (await repository.Get<EmpleadoDTO>("api/Empleados/" + productoEdicion.EmpleadoModificacion)).Response.Nombre;
		else
			nombreEmpleadoModificacion = String.Empty;

		if (productoEdicion.EmpleadoBaja != null)
			nombreEmpleadoBaja = (await repository.Get<EmpleadoDTO>("api/Empleados/" + productoEdicion.EmpleadoBaja)).Response.Nombre;
		else
			nombreEmpleadoBaja = String.Empty;

		if (productoEdicion.EmpleadoActivo != null)
			nombreEmpleadoActivo = (await repository.Get<EmpleadoDTO>("api/Empleados/" + productoEdicion.EmpleadoActivo)).Response.Nombre;
		else
			nombreEmpleadoActivo = String.Empty;

		dialogEditIsOpen = true;
	}


	private async Task CargaComboMarcas()
	{
		var responseHttp = await repository.Get<List<MarcasProductosTiendaDTO>>("api/MarcasTienda");
		Marcas = responseHttp.Response;

		MarcasBusqueda = new List<MarcasProductosTiendaDTO>();
		MarcasBusqueda.Add(new MarcasProductosTiendaDTO() { Descripcion = "" });
		MarcasBusqueda.AddRange(responseHttp.Response);
	}


	private async Task CargaProductos()
	{
		var responseHttp = await repository.Get<List<ProductosTiendaDTO>>("api/ProductosTienda");
		Productos = responseHttp.Response;

		totalProductos = Productos.Count > 0 ? Productos.Count : 0;
	}


	private async Task BajaArticulo(object item)
	{
		productoSeleccionado = item as ProductosTiendaDTO;
		if (await OpenConfirmacion("Desea dar de baja el producto seleccionado?") == 1)
			dialogValidaEmpleado = true;
	}

	private async Task AltaArticulo(object item)
	{
		productoSeleccionado = item as ProductosTiendaDTO;
		if (await OpenConfirmacion("Desea volver a activar el producto seleccionado?") == 1)
			dialogValidaEmpleado = true;
	}

	private async Task EliminarArticulo(int id)
	{
		idProductoEliminar = id;
		if (idProductoEliminar != 0)
			if (await OpenConfirmacion("Desea eliminar de forma permanente el producto seleccionado?") == 1)
				dialogValidaEmpleado = true;
			else
				idProductoEliminar = 0;

	}



	private async Task ValidaEmpleadoSave()
	{
		procesando = true;
		var responseHttp = await repository.Post("api/Empleados/ObtenerEmpleadoValidoByNumero", numeroEmpleado);

		JsonSerializerOptions JsonSerializerOptions = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
		var responseString = await responseHttp.HttpResponseMessage.Content.ReadAsStringAsync();
		empleado = JsonSerializer.Deserialize<EmpleadoDTO>(responseString, JsonSerializerOptions);

		if (empleado.EmpleadoId != 0)
		{
			Producto.MarcasProductosTiendaId = Marca.MarcasProductosTiendaId;
			if (Producto.ProductosTiendaId == 0)
			{
				Producto.EmpleadoCreacion = empleado.EmpleadoId;
				await CrearProducto();
			}
			else
			{
				Producto.EmpleadoModificacion = empleado.EmpleadoId;
				await ActualizarProducto();
			}
			CancelaDialogValidaEmpleado();
		}
		else
			toastService.ShowError("Numero de empleado no valido", "Error");

		procesando = false;
	}

	private async Task ValidaEmpleado()
	{
		procesando = true;
		var responseHttp = await repository.Post("api/Empleados/ObtenerEmpleadoValidoByNumero", numeroEmpleado);

		JsonSerializerOptions JsonSerializerOptions = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
		var responseString = await responseHttp.HttpResponseMessage.Content.ReadAsStringAsync();
		empleado = JsonSerializer.Deserialize<EmpleadoDTO>(responseString, JsonSerializerOptions);

		if (empleado.EmpleadoId != 0)
		{
			if (idProductoEliminar != 0)
				await EliminarProducto();
			else
			{
				productoSeleccionado.EmpleadoModificacion = empleado.EmpleadoId;
				await ActivarDesactivarProducto();
			}
			CancelaDialogValidaEmpleado();
		}
		else
			toastService.ShowError("Numero de empleado no valido", "Error");

		procesando = false;
	}


	private async Task GuardarProducto()
	{
		if ((Producto.Sku ?? String.Empty) == String.Empty)
		{
			await OpenMessage("Debe capturar un Código de barras");
			return;
		}


		if ((Producto.Nombre ?? String.Empty) == String.Empty)
		{
			await OpenMessage("Debe capturar el nombre");
			return;
		}

		if (Producto.MarcasProductosTiendaId == 0)
		{
			await OpenMessage("Debe capturar la Marca");
			return;
		}

		if ((Producto.Modelo ?? String.Empty) == String.Empty)
		{
			await OpenMessage("Debe capturar el modelo");
			return;
		}


		if (Producto.ProductosTiendaId == 0)
		{
			//validamos si ya existe un producto con ese Sku (codigo de barras)
			var httpResponseExiste = await repository.Get<ProductosTiendaDTO>("api/ProductosTienda/GetProductoPorSku/" + Producto.Sku);
			if (!httpResponseExiste.Error)
			{
				await OpenMessage("Ya existe un producto con ese Código de barras");
				return;
			}
		}

		if ((Producto.CostoVenta != null ? Producto.CostoVenta : 0) != 0 && (Producto.CostoCompra != null ? Producto.CostoCompra : 0) == 0)
		{
			await OpenMessage("Primero debe ingresar el costo de compra.");
			return;
		}

		if ((Producto.CostoVenta != null ? Producto.CostoVenta : 0) != 0)
			if (!CostoVentaCorrecto(Producto.CostoCompra, Producto.CostoVenta))
			{
				await OpenMessage("El Costo de Venta debe ser mayor o igual al " + porcentajeVenta.ToString() + "% (" + precioMayorPorcentaje + ") del Costo de Compra.");
				return;
			}

		dialogValidaEmpleadoSave = true;
	}

	private async Task CrearProducto()
	{
		var httpResponse = await repository.Post("api/ProductosTienda", Producto);
		if (httpResponse.Error)
		{
			if (Producto.MarcasProductosTiendaId == 0)
				toastService.ShowError("Debe seleccionar una marca", "Error");
			else
				toastService.ShowError(await httpResponse.HttpResponseMessage.Content.ReadAsStringAsync(), "Error");
		}
		else
		{
			Clear();
			dialogIsOpen = false;
			await CargaProductos();
			await Task.Delay(50);
			toastService.ShowSuccess("Registro completo", "Guardado");
		}
	}

	private async Task ActualizarProducto()
	{
		var httpResponse = await repository.Put("api/ProductosTienda/" + Producto.ProductosTiendaId, Producto);

		if (httpResponse.Error)
			toastService.ShowError(await httpResponse.HttpResponseMessage.Content.ReadAsStringAsync(), "Error");
		else
		{
			Clear();
			dialogIsOpen = false;
			dialogEditIsOpen = false;
			await CargaProductos();
			await Task.Delay(50);
			toastService.ShowSuccess("Registro completo", "Guardado");
		}
	}

	private async Task ActivarDesactivarProducto()
	{
		var httpResponse = await repository.Put("api/ProductosTienda/ActivarDesactivarProducto/" + productoSeleccionado.ProductosTiendaId, productoSeleccionado);

		if (httpResponse.Error)
			toastService.ShowError(await httpResponse.HttpResponseMessage.Content.ReadAsStringAsync(), "Error");
		else
		{
			Clear();
			dialogIsOpen = false;
			await CargaProductos();
			await Task.Delay(50);
			toastService.ShowSuccess("Registro completo", "Guardado");
		}
	}


	private async Task EliminarProducto()
	{
		var httpResponse = await repository.Delete("api/ProductosTienda/" + idProductoEliminar);

		if (httpResponse.Error)
			toastService.ShowError(await httpResponse.HttpResponseMessage.Content.ReadAsStringAsync(), "Error");
		else
		{
			Clear();
			dialogIsOpen = false;
			await CargaProductos();
			await Task.Delay(50);
			toastService.ShowSuccess("Producto Eliminado", "Completo");
		}
	}


	private async Task GuardarMarca()
	{
		if (NuevaMarca.MarcasProductosTiendaId == 0)
			await CrearMarca();
	}

	private async Task CrearMarca()
	{
		//validamos que no exista la marca
		var httpResponseV = await repository.Get<MarcasProductosTiendaDTO>("api/MarcasTienda/GetMarcaByNombre/" + NuevaMarca.Descripcion);
		if (httpResponseV.Response != null)
		{
			toastService.ShowWarning("Este nombe de marca ya existe.", "Atención");
			return;
		}

		var httpResponse = await repository.Post("api/MarcasTienda", NuevaMarca);

		if (httpResponse.Error)
			toastService.ShowError(await httpResponse.HttpResponseMessage.Content.ReadAsStringAsync(), "Error");
		else
		{
			dialogMarcaIsOpen = false;
			await CargaComboMarcas();
			await CargaProductos();
			await Task.Delay(50);
			toastService.ShowSuccess("Registro completo", "Guardado");
			NuevaMarca = new MarcasProductosTiendaDTO();
		}
	}


	private async Task Buscar()
	{
		procesando = true;
		var queryStrings = GenerarQueryStrings();
		var responseHttp = await repository.Get<List<ProductosTiendaDTO>>("api/ProductosTienda/ObtenerProductosFilter?" + queryStrings);
		Productos = responseHttp.Response;

		totalProductos = Productos.Count > 0 ? Productos.Count : 0;
		procesando = false;
	}

	private void Clear()
	{
		SkuBusqueda = string.Empty;
		NombreBusqueda = string.Empty;
		ModeloBusqueda = string.Empty;
		MarcaBusqueda = new MarcasProductosTiendaDTO();
		Marca = new MarcasProductosTiendaDTO();
		NuevaMarca = new MarcasProductosTiendaDTO();

		Producto = new ProductosTiendaDTO();

		nombreEmpleadoCreacion = String.Empty;
		nombreEmpleadoModificacion = String.Empty;
		nombreEmpleadoBaja = String.Empty;
		nombreEmpleadoActivo = String.Empty;
	}



	private async Task CargaRutaReportes()
	{
		var responseHttp = await repository.Get<ConfiguracionesDTO>("api/Configuraciones/GetIpRutaReporteInventario");
		var configuracion = responseHttp.Response;
		ipRutaReportes = configuracion.Valor;
	}

	private async Task ImprimirInventario()
	{
		try
		{
			if (await OpenConfirmacion("Desea imrpimir el inventario de artículos?") == 1)
			{
				String url = "http://" + ipRutaReportes + "/Reportes/GetInventario";
				//String url = "http://" + ipRutaReportes + "/Reporte/Inventario";
				//await Js.InvokeAsync<object>("open", url, "_blank");
				await Js.InvokeVoidAsync("blazorOpen", new object[2] { url, "_blank" });
			}
		}
		catch (Exception ex)
		{
			System.Console.WriteLine(ex.Message);
		}
	}


	private string GenerarQueryStrings()
	{
		if (queryStringsDict == null)
			queryStringsDict = new Dictionary<string, string>();

		queryStringsDict["Sku"] = SkuBusqueda != null ? SkuBusqueda : String.Empty;
		queryStringsDict["Nombre"] = NombreBusqueda != null ? NombreBusqueda : String.Empty;
		queryStringsDict["Modelo"] = ModeloBusqueda != null ? ModeloBusqueda : String.Empty;
		queryStringsDict["MarcasProductosTiendaId"] = MarcaBusqueda.MarcasProductosTiendaId.ToString();

		var valoresPorDefecto = new List<string>() { "false", "", "0" };

		return string.Join("&", queryStringsDict
			.Where(x => !valoresPorDefecto.Contains(x.Value.ToLower()))
			.Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());
	}


	private bool CostoVentaCorrecto(float? costoCompra, float? costoVenta)
	{
		CultureInfo.CurrentCulture = new CultureInfo("en-US");

		costoCompra = costoCompra ?? 0;
		costoVenta = costoVenta ?? 0;
		bool result = true;

		float? porcentaje = ((float?)(1 - ((float?)porcentajeVenta / 100)));
		precioMayorPorcentaje = (costoCompra / porcentaje)?.ToString("C2");
		if (costoVenta < (float?)Math.Round((decimal)(costoCompra / porcentaje), 2))
			result = false;

		return result;
	}


	private async Task ajustaCostoVenta()
	{
		if (Producto != null)
			Producto.CostoVenta = GeneraCostoVenta(Producto.CostoCompra);

		await Task.Delay(50);
	}

	private float? GeneraCostoVenta(float? costoCompra)
	{
		CultureInfo.CurrentCulture = new CultureInfo("en-US");

		costoCompra = costoCompra ?? 0;
		if (porcentajeVenta >= 100)
			porcentajeVenta = 99;
		if (porcentajeVenta < 0)
			porcentajeVenta = 0;

		float? porcentaje = ((float?)(1 - ((float?)porcentajeVenta / 100)));
		//porcentaje = (float?)(Math.Truncate((decimal)porcentaje * 100) / 100);
		//return ((porcentaje * costoCompra) + costoCompra);
		if (costoCompra > 0)
			return (float?)Math.Round((decimal)(costoCompra / porcentaje), 2);
		//return (float?)(Math.Truncate((decimal)(costoCompra / porcentaje)) / 100);
		else
			return 0;

	}



	private String FormatoMoneda(String value)
	{
		CultureInfo.CurrentCulture = new CultureInfo("en-US");

		if (value != string.Empty)
			return string.Format("{0:C2}", Convert.ToDecimal(value));
		else
			return "";
	}


	private void CancelaDialogValidaEmpleado()
	{
		numeroEmpleado = String.Empty;
		empleado = new EmpleadoDTO();
		dialogValidaEmpleado = false;
		dialogValidaEmpleadoSave = false;
		idProductoEliminar = 0;
	}

	private async Task<int> OpenConfirmacion(string pregunta)
	{
		var result = await MatDialogService.AskAsync(pregunta, new string[] { "Si", "No" });
		int r = 0;
		switch (result)
		{
			case "Si":
				r = 1;
				break;
			case "No":
				r = 0;
				break;
		}
		return r;
	}

	private async Task<int> OpenMessage(string pregunta)
	{
		var result = await MatDialogService.AskAsync(pregunta, new string[] { "Ok" });
		int r = 0;
		switch (result)
		{
			case "Si":
				r = 1;
				break;
		}
		return r;
	}


	private async Task MuestraHistorialPrecios()
	{
		CultureInfo.CurrentCulture = new CultureInfo("en-US");
		var responseHttp = await repository.Get<List<HistorialPreciosProductosDTO>>("api/ProductosTienda/GetHistorialPrecioProducto/" + Producto.ProductosTiendaId);
		historialPrecios = responseHttp.Response;
		pageSizeHistorial = historialPrecios.Count;

		dialogHistorialPreciosIsOpen = true;
	}

	private void CierraHistorialPrecios()
	{
		dialogHistorialPreciosIsOpen = false;
	}

}