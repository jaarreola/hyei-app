@page "/Empleado"
@inject IRepository repository

@*@inject HttpClient Http

@inject NavigationManager navigator*@

<div>
    <div class="row">
        <div class="col-md-11 col-sm-4">
            <MatAccordion>
                <MatExpansionPanel Expanded="true">
                    <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader><h5>Empleados</h5></MatExpansionPanelHeader>
                    </MatExpansionPanelSummary>
                    <MatExpansionPanelDetails>
                        <div class="row">
                            <div class="col-md-4 col-sm-4">
                                <MatTextField FullWidth="true" @bind-Value="@NombreBusqueda" HelperText="Nombre del empleado" Label="Nombre"></MatTextField>
                            </div>
                            <div class="col-md-4 col-sm-4">
                                <MatTextField FullWidth="true" @bind-Value="@DireccionBusqueda" HelperText="Dirección del empleado" Label="Direcíón"></MatTextField>
                            </div>
                            <div class="col-md-2 col-sm-4">
                                <MatCheckbox @bind-Value="@ActivoBusqueda">Activos</MatCheckbox>
                            </div>
                            <div class="col-md-2 col-sm-4">
                                <MatButton Raised="true" Icon="search">Buscar</MatButton>
                            </div>
                        </div>
                    </MatExpansionPanelDetails>
                </MatExpansionPanel>
            </MatAccordion>
        </div>
        <div class="col-md-1 col-sm-4">
            <MatIconButton OnClick="@OpenDialog" Icon="add_box"></MatIconButton>
        </div>
    </div>
</div>

@*<div>
<table class="table">
<thead>
<tr>
<th>Date</th>
<th>Temp. (C)</th>
<th>Temp. (F)</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
@foreach (var empleado in empleados)
{
<tr>
<td>@empleado.Date.ToShortDateString()</td>
<td>@empleado.TemperatureC</td>
<td>@empleado.TemperatureF</td>
<td>@empleado.Summary</td>
</tr>
}
</tbody>
</table>
</div>*@

@*<div>
<MatTable Items="@sortedData" class="mat-elevation-z5" ShowPaging="false" UseSortHeaderRow="true">
<MatTableHeader>
<MatSortHeaderRow SortChanged="@SortData">
<MatSortHeader SortId="numeroEmpleado"><span style="width:200px">No Empleado</span></MatSortHeader>
<MatSortHeader SortId="nombre">Nombre</MatSortHeader>
<MatSortHeader SortId="direccion">Dirección</MatSortHeader>
<MatSortHeader SortId="telefono">Teléfono</MatSortHeader>
<MatSortHeader SortId="puesto">Puesto</MatSortHeader>
<MatSortHeader SortId="fechaIngreso">Ingreso</MatSortHeader>
<MatSortHeader></MatSortHeader>
</MatSortHeaderRow>
</MatTableHeader>
<MatTableRow>
<td>@context.NumeroEmpleado</td>
<td>@context.Nombre</td>
<td>@context.Direccion</td>
<td>@context.Telefono</td>
<td>@context.Puesto</td>
<td>@context.FechaIngreso</td>
</MatTableRow>
</MatTable>
</div>*@


<MatDialog @bind-IsOpen="@dialogIsOpen">
    <MatDialogTitle>Empleado</MatDialogTitle>
    <MatDialogContent>
        <div class="row">
            <div class="col-md-12">
                <MatTextField FullWidth="true" @bind-Value="@EmpleadoCreacion.Nombre" Label="Nombre"></MatTextField>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <MatTextField FullWidth="true" @bind-Value="@EmpleadoCreacion.Direccion" Label="Dirección"></MatTextField>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <MatTextField FullWidth="true" @bind-Value="@EmpleadoCreacion.Telefono" Label="Telefono"></MatTextField>
            </div>
            <div class="col-md-6">
                <MatSelectItem @bind-Value="@Puesto" Items="@Puestos" Label="Puesto">
                    <ItemTemplate>
                        @context?.Nombre
                    </ItemTemplate>
                </MatSelectItem>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <MatRadioGroup @bind-Value="@EmpleadoCreacion.Activo" TValue="bool">
                    <MatRadioButton Value="true" TValue="bool">Activo</MatRadioButton>
                    <MatRadioButton Value="false" TValue="bool">Baja</MatRadioButton>
                </MatRadioGroup>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @*<MatTextField FullWidth="true" @bind-Value="@MyString7" Label="Motivo Baja" TextArea="true"></MatTextField>*@
            </div>
        </div>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { dialogIsOpen = false; })">Cancel</MatButton>
        @*<MatButton Type="submit">Guardar</MatButton>*@
        <MatButton OnClick="@CrearEmpleado">Guardar</MatButton>
    </MatDialogActions>
</MatDialog>


@code{
    private List<PuestoComboDTO> Puestos = new List<PuestoComboDTO>();
    private PuestoComboDTO Puesto = new PuestoComboDTO();
    private EmpleadoCreacionDTO EmpleadoCreacion = new EmpleadoCreacionDTO();
    
    //FILTROS BUSQUEDA
    private string NombreBusqueda;
    private string DireccionBusqueda;
    private bool ActivoBusqueda;

    bool dialogIsOpen = false;

    protected async override Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<List<PuestoComboDTO>>("api/Puestos/PuestosCombo");
        Puestos = responseHttp.Response;
        EmpleadoCreacion.Activo = true;
    }



    private async Task CrearEmpleado()
    {
        String body;
        try
        {
            EmpleadoCreacion.PuestoId = Puesto.PuestoId;

            //meter consulta de generacion de numero de empleado
            var httpResponceNoEmpleado = await repository.GetOnly("api/Empleados/ObtenerNumeroEmpleado");
            EmpleadoCreacion.NumeroEmpleado = httpResponceNoEmpleado.Content.ReadAsStringAsync().Result;


            var httpResponse = await repository.Post("api/Empleados", EmpleadoCreacion);

            if (httpResponse.Error)
            {
                body = await httpResponse.HttpResponseMessage.Content.ReadAsStringAsync();
            }
            else
            {
                Clear();
                body = "Registro completo!!";
                dialogIsOpen = false;
            }
        }
        catch (Exception e)
        {
            body = e.Message;
        }
    }


    private void Clear()
    {
        EmpleadoCreacion = new EmpleadoCreacionDTO();
        EmpleadoCreacion.Activo = true;
    }


    void OpenDialog()
    {
        dialogIsOpen = true;
    }
}